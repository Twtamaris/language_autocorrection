
Difference between "append" and "extend" in Python lists:

python
Copy code
# append adds a single element to the end of the list
list_a = [1, 2, 3]
list_a.append(4)  # [1, 2, 3, 4]

# extend adds elements from an iterable to the end of the list
list_b = [5, 6, 7]
list_a.extend(list_b)  # [1, 2, 3, 4, 5, 6, 7]
Purpose of a lambda function in Python:

python
Copy code
# Lambda function to square a number
square = lambda x: x ** 2
print(square(5))  # Output: 25
Differences between a shallow copy and a deep copy in Python:

python
Copy code
import copy

original_list = [[1, 2, 3], [4, 5, 6]]

# Shallow copy
shallow_copy = copy.copy(original_list)
original_list[0][0] = 'changed'
print(shallow_copy)  # Output: [['changed', 2, 3], [4, 5, 6]]

# Deep copy
deep_copy = copy.deepcopy(original_list)
original_list[0][0] = 1
print(deep_copy)  # Output: [['changed', 2, 3], [4, 5, 6]]
Concept of method overriding in object-oriented programming:

python
Copy code
class Parent:
    def print_info(self):
        print("Parent's method")

class Child(Parent):
    def print_info(self):
        print("Child's method")

obj = Child()
obj.print_info()  # Output: Child's method
What a generator is and how it differs from a list in Python:

python
Copy code
# Generator function
def square_numbers(n):
    for i in range(n):
        yield i ** 2

# Generator object
gen = square_numbers(5)

# Accessing generator values
print(next(gen))  # Output: 0
print(next(gen))  # Output: 1
How Python manages memory:
Python uses a private heap to manage memory. Objects and data structures are allocated in this heap, and the Python memory manager handles allocation and deallocation.

Explanation of decorators in Python:

python
Copy code
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()
# Output:
# Something is happening before the function is called.
# Hello!
# Something is happening after the function is called.
Explanation of scope in programming:
Scope defines the visibility and accessibility of variables. In Python, variables have local, global, and built-in scopes.

Purpose of the __init__ method in Python classes:

python
Copy code
class MyClass:
    def __init__(self, name):
        self.name = name

obj = MyClass("John")
print(obj.name)  # Output: John